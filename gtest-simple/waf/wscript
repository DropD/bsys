from waflib.Build import BuildContext
from waflib.Errors import ConfigurationError
import pathlib
import subprocess as sp

APPNAME = "gtest-simple"
VERSION = "1.0"

GTEST_COMMIT = "609281088cfefc76f9d0ce82e1ff6c30cc3591e5"

top = '.'
out = "build"
gtest_top = top + f"/googletest-{GTEST_COMMIT}/googletest"
includes = [
    top + "/include",
]
cflags = ["--std=c++2a"]

def options(ctx):
    ctx.load("compiler_cxx waf_unit_test")
    ctx.add_option("--googletest-root", action="store", default="", help="location of the googletest source code")


def configure(ctx):
    ctx.load("compiler_cxx waf_unit_test")
    ctx.find_program("git")
    ctx.env.GTEST_ROOT = ctx.options.googletest_root
    if not ctx.env.GTEST_ROOT:
        externals = pathlib.Path(top) / "externals"
        externals.mkdir(exist_ok=True)
        gtest_repo = externals / "googletest"
        if not gtest_repo.exists():
            print("cloning googletest")
            sp.check_call(["git", "clone", "https://github.com/google/googletest", str(gtest_repo)])
        print("updating googletest")
        sp.check_call(["git", "pull"], cwd=gtest_repo)
        ctx.env.GTEST_ROOT = str(gtest_repo / "googletest")
    try:
        print("searching for googletest sources")
        gtest_all = ctx.find_file(ctx.env.GTEST_ROOT + "/src/gtest-all.cc", [top])
        gtest_main = ctx.find_file(ctx.env.GTEST_ROOT + "/src/gtest_main.cc", [top])
        ctx.env.GTEST_CXX = [gtest_all, gtest_main]
    except ConfigurationError:
        print("googletest sources not found, downloading")


def build(ctx):
    ctx.program(
        "main",
        target="main",
        source="src/main.cpp",
        includes=includes,
        cxxflags=cflags
    )


def run_test(ctx):
    ctx.program(
        "testapp",
        features="test",
        target="square_plus_one_test",
        source=[
            "tests/test_square_plus_one.cpp",
        ] + ctx.env.GTEST_CXX,
        includes=includes + [ctx.env.GTEST_ROOT, f"{ctx.env.GTEST_ROOT}/include"],
        cxxflags=cflags,
        depends_on="gtest_updated",
    )
    from waflib.Tools import waf_unit_test
    ctx.add_post_fun(waf_unit_test.summary)


def test(ctx):
    from waflib import Options
    Options.commands = ["configure", "build", "run_test"] + Options.commands


class TestContext(BuildContext):
    cmd = "test"
    fun = "test"


class RunTestContext(BuildContext):
    cmd = "run_test"
    fun = "run_test"
